POSIX - это программный интерфейс UNIX, по аналогии с WinAPI для Windows.
Если ОС реализует POSIX, тогда она имеет право считаться UNIX-подобной.

Командная оболочка - это интерфейс взаимодействия с системой. 
В Linux командной оболочкой является bash.

Распрастраненные команды Linux:
* pwd - полный путь к рабочую директории (в терминале); 
* cd - изменить текущую директорию (вызов без аргументов - переход к дом. каталогу);
* ls - вывести содержимое каталога; ключ -l выводит расширенную информацию; 
ключ -a выводит также и скрытые файлы; ключ -d выводит только директории;
* touch - создать файл (touch file);
* rm - удалить файл (rm file); ключ -r позволяет удалить всю директорию (rm -r dir); 
удалить скрытые файлы внутри директории (rm -r .*);
* mkdir - создать директорию (mkdir dir);
* rmdir - удалить пустую директорию (rmdir dir);
* cat - объединить несколько файлов в один либо просто вывести содержимое файла 
в стандартный поток вывода (cat file или cat file1 file2 > file3);
* less - вывести содержимое на экран, порционно;
* cp - копировать файл (cp file dir [файл и место]); слэш в конце dir ставить необяз.; 
рекурсивное копирование (cp -a dir/. dir2 [точка означает "всё" внутри dir);
копировать с заменой (/bin/cp -rf dir/* dir2); здесь обязательно через /bin/cp; 
* mv - переименовать файл либо переместить его (mv dir/file dir/file2);
* head - вывести первые 10 символов файла (head -n file [n переопределяет число 10]);
* tail - тоже что и head только выводит с конца; ключ -f оставляет файл открытым и
обновляет информацию, по мере добавления;
* grep - поиск по содержимому (grep PATTERN file [шаблон поиска и файл]); 
ключ -v означает "не содержит";
* wc - подсчитывает число строк, слов или байт в файле; ключ -l выводит кол-во строк;
ключ -w выводит кол-во слов; ключ -c выводит кол-во символов;
* whoami - определить текущего пользователя;

Ключи команд можно комбинировать: ls -la
Посмотреть справку про команду и её ключи: ls --help
Посмотреть содержимое другого каталога можно так: ls /another_dir

Если путь начинается со слэша, то это абсолютный путь. Если путь начинается с точки 
или обычного символа, то это относительный путь.

В Linux всё является файлами, даже папки! Файлы различаются по типу. 
Папки имеют тип directory. 

Тип файла можно узнать по первому символу, при воводе информации через ls -l:
Информация показ. следующ.: права, хардлинк, владелец, группа, размер, дата, название.
...
drwxrwxr-x 2 user group 4096 Nov 19 bin    -->  каталог
-rwxrwxr-x 1 user group 193  Nov 19 file   -->  файл
lrwxrwxr-x 1 user group 0    Nov 19 file2  -->  ссылка

Стандарные каталоги Linux:
* / - корневой каталог;
* bin - бинарные файлы, установленные программы;
* boot - ядро ОС и загрузчик grub;
* dev - девайсы;
* etc - конфиги программ;
* home - домашний каталог пользователя;
* lib/lib64 - библиотеки для работы установленных программ;
* lost-found - служебный каталог, хранящий инфу при поврежден. файловой системы;
* media - опциональный каталог для монтирования;
* mnt - временный каталог для монтирования;
* opt - хранит какие-то важные вещи, которые хочется выделить отдельно;
* proc - отображает все работающие процессы;
* root - отдельный домашний каталог для пользователя root; 
* run - хранит временные файлы с информацией, кем были запущены текущие программы;
* var - хранит различные логи и инфу о том, как что-то работает или не работает.
* exit - завершает процесс в командной оболочке (например выход из root);

В именах файлов лучше избегать пробелов, т.к. пробел это разделитель в командной строке.
Если имя файла начинается с точки, то такой файл считается скрытым.

Расширения файлов в Linux как таково необязательно. Ему без разницы, есть оно или нет.
В основном оно указывается либо для людей, либо для конкретных программ.

Точка означает текущий каталог, а две точки подряд - каталог на уровень выше.
Кроме того, точки - это единственные хардлинки на каталоги!

При выводе информации через ls -l, у каждого каталога отображается по 2 хардлинка. 
Первый означает имя каталога, а второй - это точка внутри него.

Чтобы запускать исполняемые файлы, нужно также использовать точку (и слэш). 
Это особенность запуска, относящаяся к бозопасности системы: ./program

Клавиша Tab дополняет название файла или команду до нужной записи. Если нажать Tab 
два раза, тогда будет выведены все возможные варианты записей.

Чтобы переопределить стандартный поток вывода, нужно использовать знак ">".
Если использовать знак ">>", то файл будет дозаписываться.
...
ls -l > file  (теперь весь вывод будет в файл)
ls -l 2> file (а так переопределяется вывод ошибок)
> file (так будет создан пустой файл; ещё один вариант создания)
cat /etc/* > file 2> err_file (выведет инфу в file, а ошибки в err_file)

Маски файлов задаются с помощью символов "*" или "?".
Звездочка означает любое кол-во, любых символов. А вопрос - один любой символ:
...
rm S*  -->  удалит все файлы, которые начинаются на "S"
rm S?  -->  тоже условие, но названия файлов должны состоять из двух букв

Если программа работает со стандартным потоком ввода, то в неё можно перенаправлять
информацию из файла. Ввод выполняется с помощью знака "<".
...
mysql server.local < file.sql  (БД на сервере заполнится данными из файла)

Чтобы перенаправить стандартный поток вывода одной программы, в стандартный поток ввода
другой программы, нужно использовать такую запись: prog1 | prog2. Вертикальная черта
означает "pipe" - канал передачи данных.
...
ls -l /dir | less (передает вывод содержимого каталога, на ввод в less)
grep CRON log.txt | wc -l (ищет все строки со словом CRON и выводит их кол-во)

Если вызвать команду, которая ожидает какой-то ввод, без аргумента, тогда на ввод будет
подаваться информация с клавиатуры, например команда cat > file будет ожидать пока
пользователь сам что-то введет, а затем, после нажания на Ctrl+D, сохранит файл.
Если аргумент задан, то на ввод будет подано его содержимое (обычно аргумент
представляет собой название какого-то файла или директории).

Комбинация Ctrl+Z сворачивает программу в фоновый режим.

-------------------------------

В Linux пользователи делятся на две категории: root и все остальные.
Пользователи "daemons" это те, от имени которых работают различные службы.

На root не действую никакие ограничения, даже если они заданны для всех пользователей!
Работать под root не совсем безопасно. Обычно на него переключаются, когда нужно
сделать какие-то изменения в ОС (изменить конфиги, установить ПО и т.д.).

Команды по настройке пользователей и прав:
* id - выводит информацию о пользователе (id root);
* chmod - изменить права на файл (chmod u-r file или chmod g-x,o+rw file 
[минус означает убрать, а плюс - добавить]; ещё варианты: chmod +w file
[для пользователя и группы], chmod a+x file [для всех]);
* chown - изменить владельца файла (chown user:group file [группа необязательна]);
* passwd - изменить пароль текущего пользователя;
* sudo - вызывает команду от имени суперпользователя (sudo rm file); команда "sudo su" 
переключает простого пользователя на root.
* usermod - изменяет учет. запись пользователя (логин, пароль, дом. каталог и т.д.);

Информация о пользователе:
* uid (user id) - цифровой идентификатор пользователя; для root он всегда 0; 
идентификаторы простых пользователей обычно начинаются с 1000, до 1000 - это "daemons";
* gid (group id) - идентификатор группы пользователя; группа обязательно должна быть, 
хотя бы одна (такая группа называется primary);

У каждого файла, как правило, есть владелец, т.е. тот кто его создал. Он может
раздавать права другим пользователям.

Права на файл отображаются в такой последовательности. Сначала для его владельца (u), 
потом для тех, кто входит в группу владельца (g), и в конце, для всех остальных (o)
(кто не входит в группу и не является владельцем).

Типы прав (их можно комбинировать):
* r - чтение (всегда на первом месте);
* w - запись (всегда на втором);
* x - исполнение (всегда на третьем).

Файл с такими правами "-rwxrwxr-x" означает:
1) Черточка вначале говорит о том, что это файл.
2) Первые "rwx" говорят, что владельцу доступно чтение, запись и исполнение.
3) Вторые "rwx" говорят, что такие же права доступны всем, кто входит в его группу.
4) Последние "r-x" говорят, что всем остальных доступно только чтение и исполнение.

Если какое либо право отсутствует, то вместо него будет стоять черточка.
Право "x" для каталога означает, что в него можно зайти. 

Кроме того, существуют ещё специальные права "s" (suid bit) и "t" (sticky bit). 
Первое говорит о том, что владелец процесса равен владельцу файла. А второе означает,
что если оно задано у каталога, то файлы внутри него может удалять только их владелец.

Права всегда задаются в двочной системе счисления. Если право есть - указывается 1,
если нет, то 0. Т.е. такая запись "rwxrwxr-x" буквально означает "111 111 101".

Иногда права на файл можно увидеть в цифровом виде: 775 (111 111 101), 644 и т.п. 
Это всё теже самые права, только переведенные в 8-ричную систему счисления.

Информация о пользователях хранится трёх файлах:
1) "/etc/passwd" - пользователи.
2) "/etc/group" - группы.
3) "/etc/shadow" - пароли (в виде hash'а).

-------------------------------

Метаинформация о файлах (когда они были созданы, где лежат и т.п.) хранится в
специальных блоках данных, под названием - "иноды" (файловые дискрипторы). 
Права доступа к файлам и софтлинки также хранятся в них.

Номера инодов можно узнать с помощью ключа -i, команды ls.
Иноды уникальны только в рамках одного диска.

Имена файлов и каталогов хранятся в самих каталогах. Т.е. каталог - это спец. файл, 
который хранит в себе просто имена других файлов и каталогов. А уже сам GUI
интерпритирует его как некоторую вложенность.

Hardlink - это имя файла в файловой системе. Файл существует, пока на него есть 
хотябы один хардлинк. Хардлинк может существовать только в рамках одного диска.
Новые хардлинки на один и тот же файл не занимают иноды.

Softlink (или Symlink) - это аналог ярлыка в Windows. Преимущественно именно они 
используются вместо хардлинков в повседневе, т.к. доступны на разных дисках. 
Кроме того, они всегда имеют права 777.

Команды связанные с инодами и ссылками:
* ln - создает ссылку на файл (ln file new_hardlink); если указать ключ -s,
тогда будет создан софтлинк (символьная ссылка), иначе - хардлинк;
* stat - посмотреть информацию из иноды (stat file);

Существуют файловые системы, в которых кол-во инодов ограничено. Посему может случится 
такая ситуация, что иноды уже закончились, но место на диске еще есть. Это приведет 
к тому, что расширить файлы можно будет, но создать новые - нет. 
Файловая система ext4 как раз из их числа!

-------------------------------

Протокол TCP/IP - это на самом деле 2 протокола. TCP - транспортный протокол, 
который говорит, как данные будут доставляться к компьютеру, а IP - сетевой протокол, 
рассказывающий, как компьютеры идентифицируются в сети.

Помимо TCP есть еще протокол UDP. TCP - это протокол с подтверждением доставки данных.
А UDP не подверждает этого, т.е. в итоге будет неизвестно, дошли данные или нет.
Посему, при использовании UDP нужно дополнительно проверять целостность данных.

Протокол TCP более ресурсоемкий, т.к. он сам проверят целостность данных.
Он работает с большими задержками, чем UDP, т.к. сначала он должен всё проверить 
и только потом передать информацию. Итого: UDP - быстро, TCP - гарантированно.

На более высоком уровне существуют также протоколы приложений: SSH, HTTP и т.д.
Т.е. это всё приложения, которые обрабатывают понятную им информацию.

IP-адрес идентифицирует компьютер, для которого приходят данные, а порт идентифицирует 
приложение, для которого эти данные предназначены. 

Порты могут быть зарезервированными по умолчанию, например: 22 -> SSH, 443 -> HTTPS.

