По смыслу хранилище напоминает один большой компонент, который доступен во всех других
компонентах приложения. Оно хранит общие состояния и логику работы с ними.

Хранилище не должно содержать абсолютно все состояния компонентов. Туда в основном
выносят глобальные состояния, которые используются более чем в одном компоненте. 

А вот локальные состояния, которые незначительно влияют на компонент можно оставлять 
в самом компоненте.

Создать хранилище:
...
const store = createStore({
  state() {  -->  Может быть и объектом state: { ... }
    return { count: 0 }
  },

  mutations: {
    increment(state) {
      state.count++;
    }
  },

  getters: { ... },  -->  Вычисляемые свойства хранилища
});

const app = createApp({});
app.use(store);

Обратится к мутации increment: store.commit('increment');
Обратится к состоянию: console.log(store.state.count);

Обратится к данным хранилища внутри компонента:
...
methods: {
  doSomething() {
    this.$store.commit('increment');
    console.log(this.$store.state.count);
  }
}

Состояние хранилища является реактивным, поэтому в компоненте оно должно быть связано 
с вычисляемым свойством.
...
computed: {
  count() {
    return this.$store.state.count;
  }
}

Если в одном компоненте требуется обращаться ко множеству состояний, можно использовать
хелпер mapState. Он упрощает к ним доступ (вместо того чтобы писать this.$store).
...
computed: mapState({
  count(state) {
    return state.count
  },
  count2: 'count'  -->  Тоже самое что и count(state) { return state.count; }
  count3: state => state.count  -->  Можно также использовать и стрелочные ф-ции
})

Если также имеются вычисляемые свойства, не зависящие от состояний хранилища:
...
computed: {
  myProp() { ... }, 
  ...mapState({ ... })
}

Если вычисляемые свойства должны иметь такие же названия, как и состояния хранилища:
...
computed: mapState(['count1', 'count2'])  -->  Создаст свойства 
                                            count1: state => state.count1 и т.п.

Геттеры хранилища это по сути тоже самое что и вычисляемые свойства компонента
(но они не кэшируется в отличии от вычисляемых свойств).

getters: {
  result(state) {
    return 'Результат: ' + state.count + 23;
  },
  doneTodos(state[, getters]) {
    return state.todos.filter(todo => todo.done);
  }
}

Обратится к геттеру хранилаща из компонента:
...
computed: {
  doneTodos() {
    return this.$store.getters.doneTodos;  -->  Здесь результат кэшируется, 
      т.к. он связан с вычисляемым свойством компонента
  }
}

Если необходимо передать геттеру аргумент, тогда он должен возвращать ф-цию:
...
getters: {
  getTodoById(state) {
    return id => state.todos.find(todo => todo.id === id);
  }
}
store.getters.getTodoById(2)  -->  Теперь к геттеру нужно обращаться как к ф-ции


Хелпер для работы с геттерами - mapGetter:
...
computed: { 
  ...mapGetters(['doneTodos']) 
}

Изменение состояний происходит через мутации. Мутации напоминают события. Каждая
мутация имеет обработчик, которой принимает в параметрах объект state. Этот обработчик
нельзя вызывать напрямую, а только через метод store.commit('mutation_type').

В метод store.commit можно передать доп. аргумент, который называется payload. 
Обычно это параметрический объект (но необязательно):
...
mutations: {
  increment(state, payload) {
    state.count += payload.amount;
  }
}
store.commit('increment', { amount: 10 });

Метод store.commit можно вызывать и с одним параметрическим объектом, 
но в этом случае он должен также содержать тип мутации: 
...
store.commit({ 
  type: 'increment', 
  amount: 10 
});

В больших проектах предпочтительнее объявлять мутации через константы. 
Константы хранятся в одном файле, что позволяет увидить сразу все мутации в проекте.
...
mutations: {
  [SOME_MUTATION](state) { ... }
}

Для мутаций также существует свой хелпер mapMutations:
...
methods: {
  ...mapMutations(['increment'])  
        -->  increment(amount) { this.$store.commit('increment', amount); }

  ...mapMutations({ add: 'myMutation' })  
        -->  add() { this.$store.commit('myMutation'); }
}

Мутации должны быть синхронными, т.к. если выполнять в них асинхронные операции, 
то будет непонятно какая из них выполнится первой и изменит состояние и т.д.

Для обработки асинхронных операций используются действия (actions). Это те же самые
мутации только вместо того чтобы изменять состояния, они "комитят" мутации. Также они
могут содержать произвольные асинхронные операции, т.е. побочные эффекты.

Обработчики действий принимают в параметрах объект контекста, который содержит 
те же самые свойства и методы что и store (но это разные объекты).
...
actions: {
  increment(context) {
    setTimeout(() => context.commit('increment'), 1000);
    context.commit(types.CHECKOUT_REQUEST);
  }
}

Действие вызывается с помощью метода store.dispatch('action_type').

Они поддерживают все тот же формат передачи полезной нагрузки payload как и мутации:
srore.dispatch({ type: 'increment', amount: 10 });

Хелпер для работы с действиями - mapActions:

methods: {
  ...mapActions(['increment'])  -->  increment() { this.$store.dispatch('increment'); }
}

Если необходимо обрабатывать цепочку действий, тогда действия должны возвращать промис.
А для удобный работы можно использовать async/await.
...
actions: {
  actionA({ commit }) {
    return new Promise(resolve => {
      commit('someMutation');
      resolve();
    });
  },

  actionB({ dispatch, commit }) {
    return dispatch('actionA').then(() => {
      commit(someOtherMutation);
    });
  }  
}

Модули предназначены для разделение одного большого хранилища, на более мелкие. 
Также модули могут содержать свои внутренние саб-модули.
...
const moduleA = {
  state() { ... },
  mutations: { ... },
  actions: { ... },
  getters: { ... }
};

const moduleB = {
  state() { ... },
  mutations: { ... },

  modules: {
    subModule: { ... }
  }
};

const store = createStore({
  modules: {
    a: moduleA,
    b: moduleB
  }
});

store.state.a  -->  Состояния moduleA
store.state.b  -->  Состояние moduleB

Внутри модуля, state указывает на локальное состояние, а rootState на корневое
состояние (их можно найти в объекте context или в параметрах вычисляемого свойства).

По умолчанию, в любом модуле, мутации и действия регистрируются в глобальном
пространстве имен. Это может привести к коллизии. Чтобы вынести их в отдельное
пространство, нужно добавить модулю дополнительное свойсто namespaced.
...
modules: {
  account: {
    namespaced: true,
    state() { ... },
    mutations: { ... }
  }
}

Чтобы зарегистрировать глобальное действие внутри модуля с собственным пространством,
нужно объявить это действие как объект со свойством root.
...
{
  actions: { ... },
  modules: {
    foo: {
      namespaced: true,
      actions: {
        someAction: { root: true, handler() { ... } }
      }
    }
  }
}

Хелперы можно также использовать с пространством имен:

computed: {
  ...mapState('some/nested/module', {
    a: state => state.a,
    b: state => state.b
  }),
}

Либо можно сразу определить хелперы для нужного пространства:
...
import { createNamespacedHelpers } from 'vuex';
const { mapState } = createNamespacedHelpers('some/nested/module');

computed: {
  ...mapState({ 
    a: state => state.a,
    b: state => state.b 
  });
}

Модули можно добавлять/удалять динамически, после создания хранилища:
...
const store = createStore({ ... });
store.registerModule('myModule', { ... });
srore.unregisterModule('myModule');  -->  Удалять можно только динамические модули
store.hasModule('myModule');

Стоит запомнить что состояние у модулей (а лучше и везде) должно объявляться через 
ф-цию. Это необходимо, чтобы исключить некоторые баги, например когда один и тот же
модуль регистрируется несколько раз, в одном и том же хранилище. 

При такой регистрации, состояние объявленное через объект будет одинаковым (иметь одну
ссылку) для всех экземпляров модуля, хотя ожидается что оно будет разным. Эта проблема
относится и к свойству data из Vue2, которое во Vue3 изменили на метод.

Плагины позволяют добавлять пользовательские хуки для каждой мутации. 
Плагины не могут напрямую изменять состояния. Они только комитят мутации.

