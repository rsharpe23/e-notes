АНАТОМИЯ АДДОНА

Аддон начинается с toc-файла (Table of Contents), который содержит метаданные. 
Toc-файл должен иметь такое же название как и папка аддона. Каждая строка метаданных
(директива) начинается с ##. После метаданных указываются файлы аддона (*.xml и *.lua). 

Пример простого toc-файла: 

 ## Interface: 30300
 ## Title: My Addon Name
 ## Author: My Name
 ## Notes: This is my simple addon

 MyAddon.xml
 MyAddon.lua

Список стандартных директив:

 * Interface - число, которое игровой клиент использует для версионирования аддона 
   (когда открывается меню аддонов на главном экране). Если версия аддона не совместима 
   с текущим клиентом, то аддон будет либо "устаревшим", либо "несовместимым".

   (Аддон считается устаревшим, когда меняется минорный патч. Такие аддоны все еще могут
   работать если отметить соответсвующую галочку вверху. Несовместимым аддон считается 
   тогда, когда меняется мажорный патч. Такие аддоны не работают.)

   Число (интерфейса) строится исходя из текущего патча. Например для патча 
   3.3.0 оно будет таким: 30300

 * Title - заголовок, который отображается в меню аддонов. Заголовок может быть
   локализованным. Например, чтобы добавить текст на испанском нужно объявить 
   такую директиву: ## Title-esES: Hola Amigo

   Если у пользователя клиент на испанском, то ему выведится именно такая строка.

 * Notes - более длинное описание, чем в Title. Также может быть локализованным.

 * Dependencies или RequiredDeps - список зависимостей (название аддононов через запятую).
   Например: ## Dependencies: Juggernaut, Alpha

   Когда аддону не хватает требуемых зависимостей, он будет отключен. 
   Зависимости гарантируют, что аддоны будут загружен в правильном порядке. 

 * OptionalDeps - список необязательных зависимостей с кот. может взаимодействовать аддон.

 * LoadOnDemand - число 0 или 1, которое означает что это LoD-аддон. Такие аддоны
   подгружаются динамически, в ответ на какое-то событие в игре. Все Blizzard-аддоны 
   являются динамически подгружаемыми.

 * LoadsWith - динамически-подгружаемая зависимость для LoD-аддона. 
   Комбинируется с LoadOnDemand. Например: ## LoadsWith: Blizzard_RaidUI

 * DefaultState - состояние аддона по умолчанию: enabled или disabled.

 * LoadManager - указывает на аддон, который может загружать текущий аддон. 
   Например: ## LoadManager: AddonLoader

   AddonLoader может загружать другие аддоны в зависимости от специальных условий 
   в toc-файле. Например, если прописать: ## X-LoadOn-Class: Rogue 
   то текущий аддон будет загружаться только для роги.

 * SavedVariables - название Lua-переменной, в которой хранятся межсессионные данные. 
   Например: ## SavedVariables: JuggernautDB

   Единсвенный способ сохранить данные аддона, это объявить переменную в Lua-коде и передать
   ее имя в директиву SavedVariables. После этого игра будет записывать данные из этой
   переменной в файл, при выходе из игры, и считывать данные в переменную при входе.
   Переменная может быть след. типа: string, number, boolean или table. 

 * SavedVariablesPerCharacter - делает тоже самое, но сохраняет данные 
   для каждого персонажа в отдельные файлы.
 
Пользовательские директивы определяются так: X-Метка. Например: X-FAQ, X-Website и т.п.
Они могут содержать только строки до 1000 символов и быть локализованными.

 ## X-Website: http://www.myaddon.com
 ## X-Website-esES: http://www.myaddon.com/esES

Чтобы получить корректную версию веб-сайта, нужно воспользоваться ф-цией 
GetAddOnMetadata() в Lua-скрипте.

Аддону можно задать категорию с помощью директивы X-Category. 
Например: ## X-Category: Auction 

Полный список всех категорий на стр. 132.

XML-файлы хранят разметку аддона. Они также могут загружать lua-скрипты через тег 
<Script file="my-file.lua" />. Каждый XML-файл должен содержать на самом верхнем уровне 
тег <Ui>. Этот тег должет также содержать schema-информацию для валидации XML-файла, 
как в примере ниже: 

 <Ui xmlns="http://www.blizzard.com/wow/ui/"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://www.blizzard.com/wow/ui/
                         http://wowprogramming.com/FrameXML/UI.xsd">

Атрибут xmlns задает пространство имен для XML-файла (или название схемы).
  
Атрибут xmlns:xsi говорит валидационной программе к какому schema-экземпляру 
будет соответствовать схема XML-файла.

Атрибут xsi:schemaLocation - это пара строк, которые указывают, где можно найти схему. 
Т.е. схему с названием http://www.blizzard.com/wow/ui/ можно найти по адресу 
http://wowprogramming.com/FrameXML/UI.xsd

По мере загрузки XML-файлов, в файл Logs/Framexml.log могут записываться разные ошибки.
Если аддон ведет себя не правильно, рекомендуется проверить этот файл.

Lua-файлы загружаются, парсятся и выполняются в порядке, который указан в toc-файле.
Аддон также может включать пользовательскую графику, звуки и шрифты.

WoW поддерживает два графических формата, когда загружает текстуры для фреймов: blp2 и tga. 
В дополнение к этому, каждый графический элемент (картинка) должен соответствовать 
следующим требования (для того, чтобы быть загруженым):

1) Ширина и высота должны быть больше или равны 2, но меньше 1024 пикселя.
2) Ширина и высота файла должны быть равны степени двойки (т.е. 32х64, но не 512х400)

Процесс локализации аддона описан на страницах 134-138.

Introducing Frames, Widget Scripts, and Events...


 

 


  

   
   

 


