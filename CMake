В CMake есть цель (target) - компонент, который нужно собрать. Это может быть
испольняемый файл, статическая или динамическая библиотека.

В CMake есть проект (project) - это набор компонентов, по смыслу похожий на Solution 
в Visual Studio.

В CMake есть флаги (flags) - это аргументы командной строки для компилятора,
компоновщика и других утилит, вызываемых при сборке.  

Конфигурация CMakeLists должна начинаться так:
...
cmake_minimum_required(VERSION 3.8)  -->  минимальная версия CMake для использования
project(MyProject)  -->  название проекта (может указ. ещё LANGUAGES и т.п)

При определении цели, сначала указывается имя испольняемого файла, а затем список
исходников. Список задается как последовательность строк через пробел.
...
add_executable(MyProgram main.cpp fun.h fun.cpp)

В одном проекте может быть множество файлов CMakeLists, в разных подкаталогах.
Чтобы подключить дополнительный CMakeLists из подкаталога:
...
add_subdirectory(<путь к подкаталогу>)

Целью также может быть библиотека. Параметр STATIC означает, что библиотека
статическая, а SHARED - динамическая. Эта директива создает библиотеку из исходников!
...
add_library(MyLib STATIC tools.h tools.cpp)

Для организации зависимостей между библиотеками не следует использовать директивы
include_directories, add_difinitions, add_compile_options.

Вместо них нужно использовать:
* target_link_libraries - для линковки файлов библиотек, от которых зависит цель;
* target_include_directories - для добавления путей к заголовкам, от кот. зависит цель;
* target_compile_definitions - для добавления макросов, с которыми собирается цель;
* target_compile_options - для добавления специфичных флагов компилятора.

Кроме того для этих директив можно выбирать области видимости:
* PUBLIC - зависимость видна для текущей цели и для всех её зависимостей;
* PRIVATE - зависимость видна только для текущей цели;
* INTERFACE - зависимость видна только для зависимостей.

Простой способ подключить скомпилированную библиотеку:
...
target_include_directories(MyProject PUBLIC zip/include)  
target_link_libraries(MyProject PUBLIC zip/lib/file.so)  -->  пути должны быть полными!

Чтобы подключить библиотеку через её CMakeLists:
...
add_subdirectory(deps/zip)  -->  здесь находится CMakeLists библиотеки
target_link_libraries(MyProject ziplib)  -->  ziplib это название проекта из CMakeLists

Нельзя записывать одни настройки с областью видимости, а други без. Если область
видимости присутствует, то и все другие настройка также должны их содержать.

В CMake можно задавать переменные. Задавать можно как единичное значение, так и список.
...
set(MY_VAR main.cpp)  -->  установка переменной
set(MY_VAR main.cpp fn.cpp fn.h)  -->  так задается список 
${MY_VAR}  -->  получение её значения

В CMake можно объявлять ф-ции и макросы. Кроме того здесь также есть условия с циклами
function(name) / endfunction(), macro(name) / endmacro()

Для подключения библиотек лучше использовать ф-цию find_package. Она принимает имя 
библиотеки (проекта) и создает переменные, которые содержат различные пути к её файлам. 
Переменные должны задаваться в файле с названием Find<библиотека>.cmake

Допустим есть библиотека "bullet.so". Чтобы её подключить создаем FindBullet.cmake 
и пишем в этом файле следующее:
...


find_package(Bullet REQUIRED)  -->  для библиотеки Bullet создадутся две переменные 
                                    BULLET_DIRS и BULLET_LIBS

target_include_directories(MyProject ${BULLET_DIRS})
target_link_libraries(MyProject ${BULLET_LIBS})

Иногда в файле CMakeLists можно встретить запись: install(TARGETS proj DESTINATION bin)
Она создает правила установки проекта, т.е. при команде make install программа 
должна установиться в системную папку bin.

Системные переменные: https://cmake.org/cmake/help/latest/manual/cmake-variables.7.html

