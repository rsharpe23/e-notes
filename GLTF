GLTF-модель описывается нодами. Каждый нод представляет собой какую-то часть модели 
и имеет: меш, трансформации и список дочерних нодов. Также, вместо меша, 
нод может содержать камеру.

Каждая сцена содержит список корневых нодов, а те в свою очередь могут содержать 
в себе другие, вложенные ноды. Таким образом образуется разные иерархии.

Меш определяется списком примитивов. Примитив описывает геометрию меша и может
содержать: атрибуты, индексы (если геометрия индексированная), материал и режим
описания (например, треугольники, линии, точки). 

Обычно меш состоит из одного примитива. Но бывает так, что меш поделен на несколько
частей. В этом случае у меша будет более одного примитива. Разделение меша на несколько
примитивов может быть полезно для ограничения количества индексов на вызов отрисовки
или для назначения разных материалов разным частям меша.

Атрибуты и индексы ссылаются на массив аксессоров. Аксессоры хранят данные атрибутов 
(и индексов), такие как: тип атрибута (VEC2/VEC3), кол-во компонентов на один атрибут,
а также buferView. Последний указывает на данные буфера, соответсвующего атрибуту.

BuferView представляет из себя кусок данных из одного общего буфера, в котором 
записано всё: вершин, нормали, текстурные коодирнаты, индексы. BuferView состоит из
таких свойств, как: индекс буфера, байтовое смещение, байтовая длина, target.

Данные модели представлены в плоском виде, за исключением массивов nodes и scenes.
Вместе, те образуют граф, ссылаясь на нужные ресурсы из других массивов 
(таких как meshes, bufferViews и т.п.).

Каждый нод сцены можно обойти рекурсивно. Обычно за обход отвечает 
пользовательская ф-ция с названием traverse: 
...
traverse(node) {
  processElementsOf(node);  -->  обработка меша, камеры и т.п.
  for (child of node.children) {
    traverse(child);
  }
}

Трансформации нодов обозначаются как TRS. Они являются локальными и влияют только 
на сам нод и его потомков. TRS можно перевести в одну матрицу трансформации.
...
"node": {                               -->  "node" {
  "translation": [10.0, 20.0, 30.0],           "matrix": [ 
  "rotation": [0.259, 0.0, 0.0, 0.966],           2.0,  0.0,    0.0,   10.0,
  "scale": [2.0, 1.0, 0.5]                        0.0,  0.866, -0.25,  20.0,
}                                                 0.0,  0.5,    0.433, 30.0, 
                                                  0.0,  0.0,    0.0,   1.0,
Матрицы TRS выглядят так:                      ]
...                                          } 
    | 1.0  0.0  0.0  10.0 |
T = | 0.0  1.0  0.0  20.0 |  -->  преобразование вектора в матрицу перевода
    | 0.0  0.0  1.0  30.0 |
    | 0.0  0.0  0.0   1.0 |

    | 1.0  0.0    0.0    0.0 |
R = | 0.0  0.866 -0.5    0.0 |  -->  преобразование кватерниона в матрицу поворота
    | 0.0  0.5    0.866  0.0 |       (выполняется с пом. математики кватернионов)
    | 0.0  0.0    0.0    1.0 |

    | 2.0  0.0  0.0  0.0 |
S = | 0.0  1.0  0.0  0.0 |  -->  преобразование вектора в матрицу масштабирования
    | 0.0  0.0  0.5  0.0 |
    | 0.0  0.0  0.0  1.0 |

Матрица трансформации находится так: M = T * R * S (порядок важен). Она заставит
вершины меша сначала масштабироваться, затем вращаться, и после этого перемещаться.

Если какое-либо из свойств TRS не указано, то будет использоватся единичная матрица.
Аналогично, если нод вообще не имеет TRS, то его локальной трансформацией будет
единичная матрица.

Глобальная (мировая) матрица трансформации определяется произведением всех локальных
матриц, на пути от корневого нода до текущего нода.

