Согласнно принципу "единственной ответсвенности" SOLID, наследование лучше применять
тогда, когда производный класс расширяет ответсвенность базового класса. Если производ.
класс привносит новую ответсвенность, то в этом случае нужно использовать композицию.

Допустим если класс, предназначенный для перемещения по сцене (это его ответсвенность),
то у него также могут быть производные классы, дополняющие эту ответсвенность 
новыми методами перемещения, поворота и т.д.

Но если классу нужны другие действия, не относящиеся к перемещению, например выбор по
клику, то это уже другая ответсвенность, и она не должна реализ. производными классами.

-----------------------------------

Разработку через интерфейсы следует вести тогда, когда у класса древовидная иерархия.
В этом случае с помощью базового интерфейса можно будет добавлять ответвления
от основной иерархии (т.е. делать композицию).

-----------------------------------

Названия переменных должны быть максимально информативны. Их названия должны говорить
не только о том, что они хранят, но и то, для какого контекста это все нужно. 
Тоже самое справедливо и для названий ф-ций.

// Это неправильно!
const dirLength = calcLength( calcDiff(vec1, vec2) );  

// Надо делать так
const calcDist = (vec1, vec2) => calcLength( calcDiff(vec1, vec2) );
const distToDragPos = calcDist(vec1, vec2);  

-----------------------------------

Вместо private static методов лучше использовать вспомогательные ф-ции, объявленные 
вне класса (но, в том же контексте). В тех языках, где нельзя создавать ф-ции отдельно
от классов, можно использовать дополнительные классы-хелперы.

-----------------------------------

При разработке всегда спрашивай себя - "а для чего конкретно здесь нужен этот ф-ционал?"
Возможно он не пренадлежит данному контексту и его лучше вынести в другое место.

-----------------------------------

Ф-ция должна выполнять исключительно ту работу, для которой она предназначена. 
Если, помимо основного ф-ционала, имеются какие-то подготовительные действия, то 
ф-цию нужно разбить на несколько частей. 

function process(arg) {
  const concreate = getConcrete(arg);
  _process(concrete);
}

function _process(concrete) {
  // Весь основной ф-ционал выполняется здесь, вокруг пар-ра concrete, 
  // а получение этого пар-ра - это подготовительные действия.
}

В языках со статической типизацией можно использовать перегрузку ф-ций.

-----------------------------------

При переборе, если коллекция имеет абстрактное название, то элемент лучше называть
"item". Если же у коллекции конкретное название, то и название элемента
также должно быть конкретным.

list.map(item => item.id);
disks.map(disk => disk.id);

Название "it" используется для именования итераторов.

-----------------------------------

[C++] Ключевое слово var/auto (и т.п.) может использоваться не только как сокращение, 
когда известна правай часть инициализации, но и когда тип имеет большую вложенность:

MyClass1.MySubClass.Inner value = getValue();
var value = getValue();  // можно написать и так

-----------------------------------

WebApi лучше оформлять как и любой другой api:

// Нормально
webApi.post('/products', data, cb);

// Так лучше
shop.buyProducts(products, cb);

-----------------------------------

А если у ф-ции длинное название, то параметры лучше начинать с новой строки.

gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height,
  0, gl.RGBA, gl.UNSIGNED_BYTE, null);

gl.framebufferRenderbufferAndAnotherAction(
  gl.TEXTURE_2D, 0, gl.RGBA, 
  width, height, 0, gl.RGBA, 
  gl.UNSIGNED_BYTE
);

-----------------------------------

Если название переменной состоит только из одного слова, то его желательно записывать
полностью (если оно не длинное или не очевидно под сокращением). Если же название
состоит из нескольких слов, то их можно сокращать. Названия ф-ций, а тем более 
классов, лучше вообще не сокращать.

const position = [0, 1, 0];
const attrPos = 23;

-----------------------------------

Если ф-ция создает новый объект, то в её имени должен быть префикс create.
Если ф-ция получает уже существующий объект или находит его, то get/find соответсвенно.

-----------------------------------

Если аббревиатура идет в начале слова, то её можно записывать в нижнем регистре, 
а если в конце - то в верхнем. При этом, длинную аббревиатуру (более 2х символов) 
лучше записывать через camelCase, даже если она в конце.

function urlToPath() {}
function getIO() {}
function createBlob() {}

-----------------------------------

Объектный литерал может использоваться не только как синглтон, но и как пространство
имен. Он не должен использоваться, если нужна предварительная инициализация.

// Это неправильно! Если требуется инициализация, 
// то нужо использовать класс
const Plugin = {
  init(data) {},
};

// Нужно делать так
const myProject = { 
  data: [],
  Plugin: class {},
  staticFn() {},
};

-----------------------------------

Если требуется зависимость для одной из ф-ций, которые сгруппированы в объекте без
состояния (например Web Api или утилиты), то её/их можно передавать через параметры:

// Это неправильно!
import module from 'my-module';
export default {
  fn1() {}  // только одна ф-ция использует модуль
  fn2() {}
};

// Нужно делать так
export default {
  fn1(module) {},
  fn2() {},
};

-----------------------------------

Если название ф-ции во множественном числе, но при этом ф-ция не возвращает 
коллекцию, то к названию можно добавить окончание "Of":

getNumComponents --> getNumComponentsOf  // возвращает кол-во компонентов

-----------------------------------

Иногда можно выносить часть логики во внешний контекст:

// Нормально
function fn(meshes, data) {
  const meshProvider = new MeshProvider(data);
  return meshes.map(mesh => meshProvider.getMesh(mesh));
}

// Так лучше
function fn(meshes, meshProvider) {
  return meshes.map(mesh => meshProvider.getMesh(mesh));
}

-----------------------------------

Provider - это некая абстракция для экранирования какого-то большого класса.

class GLUtil {
  createShader() {}
  setVertexAttr() {}
  getBuffer(data, target) {}
}

function createBuffer(data, bufferProvider) {
  return bufferProvider.getBuffer(data, gl.ARRAY_BUFFER);
}

const buffer = createBuffer(myData, glu);

-----------------------------------

Названия стрелочных ф-ций могут быть без префиксов: get, create и т.п.
Коллбеки можно именовать через префикс on*. Название cb можно использовать 
когда имя метода совпадает с именем колбека**.

const buffer = (gl, store) => { ... }  // вместо getBuffer
function fn(obj, onClick) { ... }      // onClick вместо cb *
function traverse(cb) { ... }          // cb вместо onTraverse **

-----------------------------------

Если метод класса возвращает поле класса, то это должно быть свойством:

get matrix() {
  if (this.parent) {
    mat4.mul(this._matrix, this.parent.matrix, this._matrix);
  }

  return this._matrix;
}

-----------------------------------

В последнее время вместо function declaration модно определять стрелочные ф-ции.
Скорей всего это пошло из-за работы с ES-модулями. Так например, если модуль имеет
всего одну ф-цию, то её можно экспортировать как default без имени, а для этого надо
использовать либо стрелочну ф-цию, либо function expression. Но поскольку в новом
синтаксисе первое заменяет второе, то чтобы не смешивать разные способы определения,
видимо и было принято такое внегласное решение, определять все ф-ции в одном стиле.

-----------------------------------

Композиция в основном используется тогда, когда в системе есть уже созданные объекты 
и их нужно как-то расширить. Если же обьекты можно создавать самому, то подойдет и
обычное наследование. Также композиция используется тогда, когда нужно сделать
ответвление от основной иерархии наследования.

-----------------------------------

Утилита - это набор фасадных ф-ций, либо ф-ций, реализующих дополнительные
возможности в контексте какого-то компонента.

API - это способ взаимодействия двух разных программ или компонентов друг с другом 
(ф-ции + классы для управления какой-то программой, файлом, системой и т.п.).

-----------------------------------

Через this лучше обращаться к тем свойствам, которые требуют изменения состояния:

// Плохо
setLocations() {
  this.a_Position = this.gl.getAttribLocation(this.target, "a_Position");
  this.a_Normal = this.gl.getAttribLocation(this.target, "a_Normal");
}

// Лучше
setLocations() {
  const { gl, target } = this;
  this.a_Position = gl.getAttribLocation(target, "a_Position");
  this.a_Normal = gl.getAttribLocation(target, "a_Normal");
}

// Хорошо
setLocations({ gl, target }) {
  this.a_Position = gl.getAttribLocation(target, "a_Position");
  this.a_Normal = gl.getAttribLocation(target, "a_Normal");
}

