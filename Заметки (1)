В блоках, высота которых задана в пикселях, все отступы необходимо задавать в
процентах, иначе может быть скос на больших разрешениях.

Верхний отступ, всегда нужно указывать через padding, а нижний через margin, иначе
может получиться схлопывание элементов (схлопывание может быть только по вертикали).

Никогда не мешать БЭМ-блоки с БЭМ-элементами, в каждом из которых задаются 
размеры или отступы.

Чтобы задать аблосютное позиционирование с фиксацией снизу, необходимо, сначала,
родительскому элементу задать фиксированную высоту.

Чтобы наблюдался эффект перекрытия (overflow), необходимо также, вместе с ним, задать
фиксированный размер (width или height в зависимости от направления контента).

Если требуется задать псевдо-элемент для картинки (например перекрывающую рамку),
необходимо использовать обычный div вместо img, поскольку последний не работает
с ::before, ::after.

Если имеется иерархия элементов и необходимо указать высоту самому дочернему элементу,
в таком случае высоту придется указывать и каждому промежуточному элементу, вместе с
относительным позиционированием, вполоть до самого верхнего элемента в иерархии.

Если указать "transition" для свойства, которое не задано изначально, то анимация
начнет работать только после того, когда появится это самое свойство. Пример: в классе
A задано свойство "transition left ...", а сам left отсутсвует, в таком случае, если, к
классу A добавить класс B, который содержит значение left: 100% - анимация не сработает
и элемент мгновенно пеместится на заданную позицию, выполнение же анимации будет
происходить лишь при последующих изменениях left.

Наследование стилей (например @extend в Sass), необходимо использовать с осторожностью,
поскольку между ними получится зависимость и если изменить, к примеру, один стиль, то
изменятся и другие, когда их изменение, возможно, не требуются; следует также запомнить
что %шаблоны Sass (placeholder selector) нельзя наследовать внутри media-запросов.

Позиция объявления %шаблона Sass (placeholder selector) влияет на каскад; поэтому его
необходимо размещать в самом низу.

Переменные Sass лучше всего именовать по шаблону: имя-компонента__название-переменной
(не смешивая правила БЭМ, за исключением двойного нижнего подчеркивания, как метки для
определения пространства имен слева и названия переменной справа) [НЕАКТУАЛЬНО!].

При верстке шаблона необходимо помнить, что для всех элементов, в том числе всех псевдо
элементов, свойтсво border-box должно быть box-sizing, иначе контент будет вылазить за
пределы установленных размеров и будут появляется ненужные полосы прокрытки
[*,::after,::before { box-sizint: border-box !important; }]

Перед началом верстки, желательно составить ТЗ шаблона: какими должны быть ссылки,
основные цвета, сетка и т.д.

Любой контейнер обязательно должен иметь внутренние отступы "gutter width" [15px!].

Наследование в Sass необходимо выполнять в самом начале, иначе локальные значения могут
быть перезатерты наследуемыми.

@media-запросы необходимо вкладывать в элементы, а не наоборот.

Если необходимо немедленно применить стили (например предварительные установки перед
началом анимации), необходимо использовать хак - "force reflow" (немедленное применение
стилей).В браузере есть определенные свойства и методы, (узкое место в производительн.)
вызов которых заставляет немедленно вычислять значения css или раметки.
Подробнее: https://gist.github.com/paulirish/5d52fb081b3570c81e3a

JS-функции, устанавливающие значения свойствам, при определенном условии, должны
возвращать true/false, в зависимости от того было ли установлено значение или условие
не позволило это сделать.

Если комментарий стоит сразу над строкой кода, тогда он относится конкретно к ней;
чтобы пометить комментарием целый блок, необходимо доб. пустую строку после комментария.

Не использовать значение initial для свойств, т.к. его не поддерживает IE.

Если необходимо изменить геометрию или оформление, то БЭМ-блоки и их БЭМ-элементы в
Sass могут наследовать другие БЭМ-блоки. Если необходимо изменить только позиционирован
тогда необходимо делать микс БЕМ-блока и БЕМ-элемента.

Чтобы сделать размер ссылки на всё заполняемое пространство внутри родителя, необходимо
родителю задать фиксированную ширину и высоту, а ссылке те же параметры задать в
процентах и сделать ее блочной.

Переменные внутри _variables.scss - общие переменные для всех БЭМ-блоков; переменные
внутри БЭМ-блоков - те, которые задают только вариации дизайна (цвет, размер), 
но не весь дизайн полностью.

По возможности как можно чаще использовать значения inherit и currentColor вместо
placeholder selector.

В переменных должны храниться только повторяющиеся значения. Переменные основных типов
должны храниться в файле _variables.scss. Переменные компонентов должны франиться в
файлах компонентов. (основные типы: color*, font*, line-height, border* etc).

Структура Sass-файлов должна соответствовать шаблону 7-1 
(https://sass-guidelin.es/ru/#section-39).

Строки в Sass должны записываться с помощью одинарных кавычках.

Модификатор БЭМ не должен быть глобальным. С помощью модификатора можно изменять 
только тот БЭМ-блок для которого он применяется.

БЭМ-блок должен задавать базовое оформление; БЭМ-элемент - изменять позиционирование 
и внешние отступы; БЭМ-модификатор - изменять базовое оформления на различные вариации;
  
Соотношение сторон (aspect ratio) реализуется установкой ширины на 100%, высотой в 0 
и padding-top/bottom на нужный процент.

Классы обертки (.wrap) это всегда БЭМ-элементы (.page__img-wrap > .img)

Если список это блок, тогда к его пунктам можно применять элементы 
(ul.nav > li.nav__item); если список - элемент блока, тогда его пункты могут никак 
не именоваться (ul.header__nav > li)

Для оформления подложек использовать псевдо-элементы, градиенты стараться использовать
только в крайних случаях т.к. они могут расходиться с текстом при масштабировании.

Проценты использовать только тогда когда они явно необходимы.

Сначала макет необходимо верстать при масштабе 1:1, затем, после того как все будет
готово, уменьшать масштаб и выбрав наиболее подходящий по соотношению отступов,
подогнать все размеры под среднии значения.
	
Макет необходимо верстать в масштабе 1:1. При меньшем масштабе каждую секцию можно
временно позиционировать вверх или вниз для корректной верстки, т.к. чем меньше масштаб
тем сильнее может расходиться соотношение позиций между макетом и подложкой.
	
По возможности всегда устанавливать свойство flex-wrap иначе блоки не будут
переноситься на следующий ряд, что вызовет проблемы при вертске на мобильные экраны
	
При работе с псевдоэлементами необходимо придерживаться одинаковой высоты как
родительского контейнера так и самих элементов (псевдоэлементы не должны вылазить за
границы родительского контейнера, по высоте) иначе будут проблемы на мобильных экранах
такие как вертикальная полоса прокрутки при установке свойства overflow-x, 
хотя этого не должно быть априори.
	
Соседним селекторам (.elem + .elem) отступы слева или справа лучше указывать в %,
иначем могут быть скосы элементов на некоторых разрешениях экранов
	
Стараться не использовать интерлиньяж строки для высоты родительского блока, 
т.к. если строка разобьется (на моб. экранах или др.) на несколько подстрок тогда
высота блока станет очень большой
	
Стараться использоваь flex-box только по мере необходимости, т.к. он может сильно
исказить размеры элементов при масштабировании (если на моб. экранах можно обойтись 
без флексов, тогда их лучше применять только для десктопных экранов)
	
Если имеется только один макет для десктопных экранов и адаптивность для мобильных
можно делать по своему усмотрению тогда необходимо всегда использовать колонки т.к. 
с ними выполнять адаптивность всегда легче.
	
Для aspect-ratio в изображениях можно использовать сочетание max-width:100% и
height:auto. Само изображение должно быть в контейнере.
	
В процентах лучше указывать размеры и расстояния между элементами (только по горизонт.)

Если родительский элемент имеет фиксированную высоту, тогда отступы дочерних элементов
по вертикали необходимо задавать в процентах. Если фиксированная высота указана в vh
или vw, тогда отступы лучше тоже указывать в соответствующих единицах измерения.
	
Если картинка оборачивается ссылкой (тегом "a") тогда ссылка обязательно должна быть
inline-block, иначе картинка не будет правильно обхватываться.

Для IE всегда нужно указывать дополнительные свойства: top и left (нужно указывать обе
координаты даже если для этого нет необходимости), flex: 0 0 auto (всегда должно стоять
auto тогда значение будет взято из width, и элемент в таком случае будет учитывать
border-box). Для свойства object-fit необходимо использовать полифил.
	
Если имеется контейнер с боковыми отступами (стандартные -15px) тогда внутри него
нельзя использовать отступы привышающие те что у контейнера (внутренний контейнер с
отступами -30px и т.д.) иначе на маленьких экранах будут появляться зазоры по правому
краю. Отстумы меньшей величины (-5px и т.д.) допустимы!

Шрифты можно добавлять напрямую через тег <link> (CDN), без использования 
директивы @font-face.

У заголовков лучше не менять line-height, а оставлять его по умолчанию.

Комбинация display: flow-root решает проблему схлопывания. Его необходимо задавать
контейнеру, который оборачивает элемент с margin.

Идентификаторы лучше записывать через нижнее подчеркиваине, чем через тире: 
wrong-id  ->  good_id. Это из-за того, что они в основном нужны для работы с эл-том
через JS. А в JS строка с тире может некорректно интерпритироваться. Например нужно
добавить объекту ключ, название которого сопадает с названием id, а id записан через
тире. Соответсвенно будет ошибка.

При открытии html-документа в браузере, в консоли может появится ошибка вида: 
"GET http://domain/favicon.ico". Чтобы её исправить нужно в документе разместить тег
<link rel="shortcut icon" href="#">

