ПОЛЬЗОВАТЕЛЬСКИЕ ЭЛЕМЕНТЫ

Для создания пользовательского эл-та, необходимо расширить либо класс HTMLElement 
(получится автономный пользовательский элемент), либо один из его наследников, 
например HTMLButtonElement (получится встроенный пользовательский элемент).

После создания эл-та, необходимо зарегистрировать его с пом. customElements.difine():

 class MyElement extends HTMLElement {};
 customElements.define('my-element', MyElement);

Имена пользовательских эл-тов должны содержать дефис:
 my-element  // валидное имя
 myelement   // невалидное

Браузер ничего не знает о пользовательских элементах в html, пока они не зарегистрируется. 
Такие эл-ты можно скрыть через css, с пом. селектора :not(:defined). После регистрации элементы 
станут :defined. Получить информацию о пользовательских эл-тах можно с пом. 
customElements.get(name) и customElements.whenDefined(name).

Базовые методы пользовательских компонентов:

 * connectedCallback - вызывается, когда элемент добавляется в документ; 
   здесь нужно указывать разметку компонента;

 * disconnectCallback - вызывается при удалении эл-та из документа;
 * adoptedCallback - вызывается, когда элемент перемещается в новый документ;
 * attributeChangedCallback(name, oldVal, newVal) - вызывается при изменении атрибута;

 * get observedAttributes() - геттер, содержащий массив атрибутов для отслеживания изменений;
 
Если на этапе вызова connectedCallback, пользовательский элемент попытается получить html 
своего внутреннего элменента, то он ничего не получит, т.к. тот еще не будет готов.
Обойти это можно, реализовав систему событий либо использовав setTimeout.

Но если требуется просто передать какую-то информацию, то можно 
использовать атрибуты. Они доступны сразу.

Когда пользовательский элемент расширяет наследника HTMLElement, то при регистрации нужно 
также указывать тег наследника. При этом в html он будет указываться по другому.

 customElements.define('hello-button', HelloButton, { extends: 'button' });
 <button is="hello-button"></button>  // в html встроенный элемент указывается так

----------------------------

SHADOW DOM

Используется для инкапсуляции разметки и стилей компонента. 
Элементы теневого dom не видны из обычного dom, через querySelector. 
У теневого dom свои стили. Стили из внешнего dom не применяются.

Теневой dom cоздается с пом. метода attachShadow(opts):

 // Для пользовательского элемента
 connectedCallback() {
   const shadow = this.attachShadow({ mode: 'open' });
   shadow.innerHTML = `
     <style>p { font-weight: bold; }</style> 
     <p>Hello world</p>
   `;
 }

 // Для обычного элемента
 const elem = document.querySelector('.toolbar');
 elem.attachShadow({ ... });

Св-во mode задает режим инкапсуляции:
 * open - будет доступен корень теневого dom, через elem.shadowRoot;
 * closed - elem.shadowRoot будет всегда null и до теневого dom не добраться;

У shadowRoot есть св-во host. Оно ссылается на хозяина. т.е. на elem:
elem.shadowRoot.host === elem  -->  true

Хозяином может быть: пользовательский элемент, article, aside, blockquote, body, div, 
footer, h123456, header, main, nav, p, section, span. Остальные эл-ты не могут иметь теневой dom.

Чтобы просмотреть элементы теневого dom, нужно включить в браузере доп. опцию, 
например в хроме это "Show user agent shadow DOM".

Каждый dom-элемент имеет 2 типа поддеревьев:
 1) light tree - дерево, состоящее из html-потомков;
 2) shadow tree - скрытое дерево, не отраженное в html;

Если у элемента имеются оба поддерева, браузер будет отрисовывать только теневое.

----------------------------

ЭЛЕМЕНТ TEMPLATE

Используется для хранения html-шаблона, а также стилей и скриптов для него. 
Браузер игнорирует его содержимое (если вместо него использовать, например, скрытый div, 
то браузер может сам дописать недостающие теги, когда вернет страницу).

Этот элемент применяется в JS, для создания других эл-тов. 
Получить содержимое можно с пом. свойства content, которое возвращает 
DocumentFragment (особый тип dom-узла).

 <template id="tmpl">
   <style>p { font-weight: bold; }</style> 
   <p>Hello world</p>
 </template>

 <script>
   const elem = document.querySelector('.toolbar');
   elem.attachShadow({ mode: 'open' });
   elem.shadowRoot.append(tmpl.content.cloneNode(true));
 </script>

Иногда вместо <template> используют <script>, но html внутри <script> браузер не проверяет 
на синтаксическую корректность (не путать с корректностью структуры документа).

----------------------------

СЛОТЫ И КОМПОЗИЦИЯ

Слоты позволяют наполнить shadow dom элементами из обычного dom.
Для этого, внутри пользовательского эл-та, нужно использовать элемент slot.

 <custom-menu>
   <h3>Сладости</h3>
   <p>Леденцы<p>
   <span slot="cook">Игорь</span>  // для именованного слота
 </custom-menu>

 class CustomMenu extends HTMLElement {
   connectedCallback() {
     this.attachShadow(...);
     this.shadowRoot.innerHTML = `
       <div id="meal">
         <slot></slot>              // сюда попадет: <h3>Сладости</h3><p>Леденцы<p>
         <slot name="cook"></slot>  // сюда попадет: <span slot="cook">Игорь</span>
       </div>
     `;
   }
 }

Атрибут slot могут иметь только потомки первого уровня:

 <custom-menu>
  <div>
    <span slot="cook">Игорь</span>  // некорректный слот!
  </div>
 </custom-menu>

Если есть несколько эл-тов с одинаковым имененем слота, то они добавятся в слот по порядку:

 <custom-menu>
   <h3>Сладости</h3>
   <p>Леденцы<p>
   <span slot="cook">Игорь</span>
   <span slot="cook">Мария</span>
 </custom-menu>

 // Итоговая разметка (удобно, когда нужно вывести menu-item'ы)
 <div id="meal">
   <h3>Сладости</h3>
   <p>Леденцы<p>
   <span slot="cook">Игорь</span>
   <span slot="cook">Мария</span>
 </div>

Если нужно следить за изменением содержимого в слотах, то можно использ. событие "slotchange":
Это событие вызвается когда слот наполняется контентов в первый раз и при каждой операции 
добавления/удаления/замещения элемента в слоте, за исключением его потомков. 

 // shadorRoot не может иметь обработчиков событий
 this.shadowRoot.firstElementChild
   .addEventListener('slotchange', e => console.log(e.target.name))

Если внутри эл-та <slot> разместить содержимое, то оно будет отображаться 
если для слота не задано никаких элементов:

 <custom-menu></custom-menu>  // <div id="meal">Моррис</div> 

 this.shadowRoot.innerHTML = `
   <div id="meal">
     <slot name="cook">Моррис</slot>
   </div>
 `;

Процесс отображения элементов внутри слота называется "композицией". 
В результате композиции строится итоговая разметка. При композиции перемещение узлов 
не происходит - с точки зрения JS, dom остается прежним.

----------------------------

СТИЛИЗАЦИЯ SHADOW DOM

Чтобы задать стили для shadow dom, можно использ. локальные <style> и <link rel="stylesheet">. 
Последний подргужает отдельный css-файл для конкретного пользовательского элемента.

Локальные стили могут обращаться к псевдоклассу :host. Он позволяет выбрать хозяина 
(элемент, содержащий shadow root) Также :host можно задать с доп. селектором :host(selector)

При стилизации слотов, нужно стилизовать сам тег <slot> и пологаться на наследовании css:
 slot[name="username"] { background-color: white; }

Также можно использовать псевдокласс ::slotted(selector).
Но он доступен только в css. Его нельзя использовать в querySelector(). 

 // ::slotted(div) выберет тег <div slot="...">
 <user-card>
   <div slot="...">
     <div>Моррис Балконский</div>
   </div>
 </user-card>

Если требуется стилизовать shadow dom из основного css-файла, то нужно использ. css-переменные.
CSS-переменные доступны как в основном dom, так и в теневом.

 <style>
   :root { --my-color: green; }
 </style>

 <template id="tmpl">
   <style>
     .user { color: var(--my-color); }
   </style>
   <div class="user">
     Имя: <slot name="username"></slot>
   </div>
 </template>

 <script>
   customElements.define('user-card', class extends HTMLElement {
     connectedCallback() {
       ...
       this.shadowRoot.append(tmpl.content.cloneNode(true));
     }
   });
 </script>

 <user-card>
   <span slot="username">Моррис Токарев</span>  // будет зеленого цвета
 </user-card>

----------------------------

SHADOW DOM И СОБЫТИЯ

События, которые произошли в shadow dom, но были пойманы в основном dom, будут иметь 
хост-элемент в качестве целевого элемента event.target.

При этом подмена целевого эл-та не происходит если событие было сгенерировано 
элементами из слота, т.к. они находится в обычном dom.

Метод event.composedPath() возвращает массив всех тегов, по которым всплыло 
событие из shadow dom, но при условии, что { mode: 'open' }.

Свойство event.composed определяет, будут ли события всплывать за пределы shadow dom.
Если оно false, то событие может быть поймано лишь внутри shadow dom.

События, которые не всплывают за пределы shadow dom: 
 * mouseenter, mouseleave (вообще не всплывают);
 * load, unload, abort, error;
 * select; shotchange;

Когда генерируется пользовательское событие, то, чтобы оно всплывало за пределы shadow dom, 
нужно установить свойства: bubbles и composed - в значение true.

