КОМАНДНАЯ СТРОКА

Для работы в командной строке, Linux предоставляет оболочку (shell). 
Оболочка - это командный интерпритатор. Наиболее популярная оболочка - bash.

Команда состоит из 3х частей: сама команда, необязательные параметры (опции/ключи) 
и аргументы. Например: ls [-l] [/usr].

Аргументы обычно предоставляют объекты, к которым применяется команда. Они указываются
в конце. Например по умолчанию ls применяется к текущему каталог, но если задать
аргумент /usr, то команда применится к этому каталогу.

С пом. символа | можно состовлять цепочки команд: ls -R /usr | less.
Здесь ls -R /usr отправляет свой результат команде less.

С пом. символа > можно перенаправить результат выполнения команды, например с консоли
(по умолчан.) в файл: ls -l > file (если файл не был ранее создан, то создастся).

Для перенаправления ошибок используется символ 2>: ls -l > file 2> error.

Для получения информации о команде используется команда man: man название_команды.
Информация обычно состоит из следующих секций:

 * name - имя команды, и краткое описание;
 * synopsis - как использовать команду; отображает все доступные пар-ры;
 * description - полное описание;
 * options - список всех доступных опций;
 * see alse - список связанных команд.

Альтернативным способом получения информации о команде является её опция --help.

Оболочка bash запоминает историю ввода команд и позволяет повторно использовать
недавние команды. Навигацию по командам можно выполнить с пом. стрелок.

Многие дистрибутивы запоминают только последнии 1000 команд. Эти команды хранятся 
в файле .bash_history, в домашнем каталоге пользователя. 

Чтобы увидеть историю можно ввести в терминале history. Удалить историю можно либо 
с пом. команды history -c, либо просто очистить файл вручную.

Информационные команды:

 * uname - отображает имя хоста системы (т.е. компьютера) и информацию об ОС;

 * lsb_release - информация о LSB (Linux Standart Base), т.е. стандартная 
   базовая версия Linux;

 * hostnamectl - используется для отображения и изменения имени хоста, а также для
   просмотра настроек системы (архитектура, режим загрузки, часовой пояс и пр.);
   не требует входа в систему под root'ом;

 * date - отображает текущую дату.

---------------------

ФАЙЛЫ И КАТАЛОГИ

Корневой каталог имеет путь "/". Перечень стандартных каталогов:

 * /bin - приложения, которые можно запускать через командную строку;
   в основном хранит утилиты, например: bash, cp, cat и др.

 * /etc - конфигурационные файлы системы, например: passwd, hosts, networks и т.д.;
 * /boot - компоненты для загрузки системы, в частности, ядро (файл vmlinuz);
 
 * /sbin - системные приложения для администрирования и восстановления системы,
   например: fdisk, ifconfig, reboot и пр.

 * /usr - пользовательские приложения и данные (аналог Program Files);
 * /usr/bin - большинство пользовательских приложений;
 * /usr/src - исходные файлы open-source приложений (в основном c/cpp);
 * /usr/include - стандартные заголовочные файлы языка C;
 * /usr/lib - библиотеки приложений и устанавливаемые пакеты;
 * /usr/local - локальные приложения;
 * /usr/share - статические разделяемые данные;

 * /var - файлы данных, которые могут изменяться;
 * /var/cache - кэш приложений;
 * /var/include - стандартные заголовочные файлы языка C;
 * /var/lib - данные о состоянии системы;
 * /var/lock - заблокированные данные для отслеживания используемых ресурсов;
 * /var/log - файлы логов;
 * /var/opt - данные установленных пакетов;
 * /var/spool - выполняемые задачи (кроны и пр.);
 * /var/tmp - временные файлы, удаляемые после новой загрузки системы;

 * /dev - файлы устройств; в Linux все оборудование, с которым можно работать,
   соответсвует файлу в системе; если надо обратиться к hardware, то следует 
   обратиться к соответсвующему файлу (с правами root).

 * /home - домашний каталог пользователя;

 * /lib - общие библиотеки приложений, а также драйвера, используемые ядром;
 * /media - каталог для монтирования съемных устройств, например USB;

 * /mmt - тоже самое что и предыдущий, только на старых системах; 
   иногда используется в целях тестирования;

 * /opt - доп. пользовательские приложения; в отличие от /usr обычно помещают более
   крумные файлы, однако единого мнения нет, что помещать в /usr, а что в /opt.

 * /proc - файлы процессов, информация о ядре и компьютере;
 * /root - домашний каталог суперпользователя (системного администратора);

 * /run - используется для конфигурации во время выполнения; файлы удаляются 
   автоматически, когда становятся не нужны;

 * /srv - файлы некоторых важных сервисов, например здесь может хранится файловая
   структура своего веб-сервера и ftp-сервера.

 * /sys - похож на /proc, но хранит свою информацию на жестком диске, поэтому она
   доступна после перезагрузки; здесь информация больше связана с оборудованием,
   тогда как в /proc - с ядром.

 * /tmp - временные файлы, автоматически удаляемые при перезагрузке;

Команды для работы с каталогами:
 
 * pwd - выводит полный путь к текущему каталогу;

 * cd - позволяет перемещаться по каталогам; абсолютные путь задается через косую 
   черту перед именем каталога, иначе команда попытается найти относительный каталог;
   для переходу к домашнему каталогу применяется символ ~ (алиас для /home/username);
   для перехода на один/два уровня вверх применятеся путь .., ../../ (и т.д.);

 * mkdir - создает каталог; опция -p позволяет создать папку вместе с родительской
   (если та отсутствует): mkdir folder, mkdir -p ~/folder1/folder2

 * rmdir - удаляет пустой каталог: rmdir folder; если в каталоге есть файлы или
   подкаталоги, то применяется команда rm -r или -rf: rm -r folder

Команда ls отображает список файлов и папок в заданном каталоге.
Команда ls * выводит также содержимое подкаталогов.

Основные опции ls:
 -R - рекурсивно выводит содержимое подкаталогов (указывается вместо *);
 -d - выводит только каталоги. 
 -s - выводит файлы с их размером;
 -S - файлы, отсортированные по размеру;
 -t - файлы, отсортированные по времени доступа;

 -l - файлы и каталоги с их свойствами (права, владелец, размер и пр.); права файла
 имеет след. структуру drwxrwxr-x; самый первый символ указ. на тип файла, d обознач.
 каталог, l - символьную ссылку, а дефис - файл; далее идут 9 знаков разрешений;

 -a - выводит скрытые файлы.

При выводе списка файлов, вместо каталога можно задать шаблон с рег. выр-ем, 
который определит конкертные файлы для вывода, например:

 ls /project/*.min.js  -->  выберет все файлы c окончанием .min.js
 ls /project/[abc]*    -->  все файлы и папки, кот. начинаются на a, b или c

Команды для работы с файлами:

 * touch - создаёт файл: touch hello.txt
 * rm - удаляет файл: rm hello.txt; опция -r удаляет также и каталог;

 * cp - копирует файл: cp /etc/hello.txt /usr/hello.txt, cp hello.txt /folder

   (во втором примере важно чтобы folder уже существовал, иначе будет создан 
   текстовый файл folder с содержимым hello.txt); 

   опция -r позволяет копировать каталог: cp -r folder1 folder2 
   (folder2 создается автоматически);

   символ * копирует все файлы из текущего каталога: cp * /usr, cp .* /usr 
   (во втором примере копируются все скрытые файлы);

   другие опции:
    -a - копирует также свойства файлов;
    -b - создает резервные копии перед копированием;
    -f - принудительное копирование (когда файл запрещено копир. в место назначения);
    -i - запрашивает перезапись, если файл уже существует;
    -u - копируется только если целевой файл старше исходного файла, 
    или если целевой файл не существует;

 * mv - перемещает файл/каталог, а также переименовывает его: 
   mv hello.txt /folder (folder должен существовать), mv hello.txt world.txt;

 * wc - выводит кол-во строк, слов и символов в файле.

Команда ln -s создает символьную ссылку файла (ярлык): ln -s hello.txt /usr/hello
(в каталоге usr создается ссылка hello на файл hello.txt)

Команда find применяется для поиска файлов и каталогов: find /usr -name "*.txt"
(сначала указывается папка, затем опция критерия, и шаблон поиска)

Основные опции find:

 -amin n - находит все файлы, к которым последний раз обращались менее n 
 минут назад, например: find -amin 5;

 -executable - находит все исполняемые файлы;
 -group name - все файлы, владельцем которых является пользователь с логином name;
 -mmin n - все файлы, которые последний раз были изменены менее n минут назад;
 -newer file - все файлы новее, чем файл file;
 -nogroup/nouser - все файлы, у которых нет группы или владельца;
 -perm mode - все файлы, у которых установлен режим разрешений mode;

 -size n - находит все файлы размера n (либо больше/меньше); к n также применяются
 символы K, M и G для обозначения килобайтов, мегабайтов и гигабайтов соответсвенно,
 например: find /usr -size +2G (все файлы более 2 гиг);

 -type t - находит файлы по типу; тип d - это каталог, а f - файл.

Команда whereis применяется для поиска местоположений бинарный файлов, исходных файлов,
а также файлов команд, например: whereis gcc найдет местоположение команды gcc.

Команда mount применяется для ручного монтирования устройства в файловую систему. 
(в Linux, монтируемые устройства называются файлововыми системами).

Эта команда принимает два аргумента: монтируемое устройство и место монтирования. 
В качестве монтируемого устройства выступает его название (например, название диска).
В качестве места, куда оно монтируется, выступает каталог /media.

 mount /dev/phone /media/username/folder  -->  теперь можно перейти в folder
                                               и посмотреть содержимое устройства
Основные опции mount:
 -t - тип файловой системы (ext4, vfat, ntfs);
 -r - монтирует устройство только для чтения (по умолчанию -rw);

При запуске компьютера некоторые файловые системы монтируются автоматически. 
Для этого используется файл /etc/fstab. Он содержит список всех автоматических
подключений. Некоторым файловым системам можно убрать автомонтирование.

В Linux, перед отсоединением устройства от компьютера нужно сначала отключить его.
Отключение устройства гарантирует, что все данные, которые находятся в кэше или еще 
не были записаны, запишутся в файловую систему. 

Для отключения устройства используется команда: unmount /dev/sda1.

Но иногда она может выдать сообщение, что устройство занято открытым файлом, 
а отключение может привести к потере данных. В этом случае для завершения процессов,
связанных с устройством, можно использовать команду: fuser -kv /dev/sda1.

Команда mount без аргументов выводит информацию обо всех смонтированных устройствах.
Команда df -h показывает более читабельную информацию об устройствах, чем mount.
Команда lsblk отображает устройства, доступные в текущий момент на компьютере.

Устройства, которые называются как /dev/sd[x] представляют жесткие SATA-диски 
и USB-девайсы. Основными элементами жетского диска являются разделы (участки диска).

Управлять дисками и разделами можно с пом. таких утилит, как fdisk и gdisk.

---------------------

ТЕКСТОВЫЕ КОМАНДЫ

Команды для вывода содержимого файлов:

 * cat - выводит содержимое файла: cat file.txt;
 * tac - тоже, что и cat, но отображает содержимое в обратном порядке;
 * head - отображает первые строки файла;
 * tail - отображает последние строки файла;
 * less - открывает файл в спец. окружении, напоминающем редактор vi;
 * more - тоже, что и less, только с меньшими возможностями.

Эти команды можно комбинировать между собой для вывода более конкретный результата:

 head -n 2 file.txt | tail -n 1  -->  сначала, с пом. head, будут выбраны первые 
                                      две строки, после этого они передадуться в tail 
                                      и из них выберется одна последняя

Результат других команд на консоли - это тоже текст и его также можно 
обрабатывать с помощью текстовых команд: 

 ls -l | tail -n 2  -->  последние 2 строки из списка файлов и каталогов

Команда tr преобразовывает или удаляет символы из файла, например: 
cat file.txt | tr a-z A-Z  -->  переведет символы из дипазона a-z в верхний регистр
cat file.txt | tr a-z A-Z > file2.txt  -->  тоже самое, но результат запишет в файл

Команда sort используется для сортировки: cat file.txt | sort 
Для сортировки чисел нужно добавить флаг: cat nums.txt | sort -n
Отсортировать результат команды: ls | sort

Команда cut позволяет получить из (структурированного!) файла кусок информации.

Основные опции cut:
 -d - разделитель в строке (структурированного текста);
 -f - номера полей для вывода (которые разделены через -d);

Вывод имен пользователей из файла, содержащего следующий текст:
 Tom:39:Microsoft        
 Bob:43:Google           cut -d : -f 1 file.txt  -->  Tom Bob Sam Alice Kate
 Sam:28:Jetbrains        (опция -d указывает что разделитель - двоеточие,
 Alice:34:Oracle          а -f, что надо получить первое поле)
 Kate:25:Google           

Вывод первого и третьего полей: cut -d : -f 1,3 file.txt  -->  Tom:Microsoft
Вывод с первого по второе поле: cut -d : -f 1-2 file.txt  -->  Tom:39

Вывод первых 3х имен, отсортированных по алфавиту:
 cat file.txt | cut -d : -f 1 | sort | head -3  -->  Alice Bob Kate

Команда grep выполняет поиск в файле с использованием регулярного выражения.
Она имеет следующий формат: grep [опции] шаблон [file] (здесь file - это аргумент).

 grep "127.0." /etc/hosts  -->  найдет строки, содержащие данный префикс
 grep "T[ou]m" file.txt    -->  найдет строки, которые содержат Tom или Tum
 ls /home/username | grep "Do"  -->  Documents Downloads
 
Команда awk выполняет заданное действие на основе регулярного выражения.
Она имеет следующий формат: awk '/pattern/{action}' [file].

Действие заключается в фигурные скобки. А сам шаблон лучше помещать в одинарные
кавычки, чтобы оболочка не могла интерпритировать рег. выр-е.

 awk -F : '/Tom/{print $3}' file.txt  -->  выведет 3 поле (с пом. встроенной в awk
                                    команды print) для всех строк, где упоминается Tom

 awk -F : '$2 > 30 {print $1}' file.txt  -->  выведет пользователей у которых возраст
                                          больше 30 (awk доступны операторы сравнения)
---------------------

РАБОТА С АРХИВАМИ

Команда gzip (gnu zip) используются для сжатия и распаковки файлов.
Она имеет следующий формат: gzip [опции] file1 file2 fileN
Помимо файлов команде можно передать и каталог.

По умолчанию, при архивации, оригинальный файл (или несколько файлов) удаляется, 
а вместо него создаёт новый файл с доп. расширением .gz. При распаковке 
удаляется файл архива.

Чтобы файл не удалялся, используется опция -k: gzip -k book.pdf --> book.pdf.gz

Другие опции gzip:
 -d - распаковывает архив;
 -l - выводит список заархивированных файлов;
 -r - рекурсивно архивирует содержимое каталогов;
 -1 - применяет быстрое архивирование (в ущерб размеру);
 -9 - применяет лучшее архивирование (в ущерб скорость);

Файл можно распаковать и с помощью команды gunzip (тоже использует опцию -k).

Команда xz также применяется для архивации данных. Она использует алгоритм с высокой
степенью сжатия и низким использованием памяти. Используется для сжатия больших файлов
(в основном в системе Linux для сжатия ядра) а также для сжатия и распаковки на лету.

 xy -v book.pdf (опция -v выводит подробную сводку операции) 
 xy -d -v book.pdf.xz

При архивации сразу нескольких файлов, для каждого из них будут созданы отдельные
архивы, что неудобно. Команда tar позволяет объединить несколько файлов в один архив.
Она имеет следующий формат: tar [опции] [имя_архива] file1 file2 fileN

Основные опции tar:
 -c - создает архив;
 -d - сравнивает архивы;
 -r - добавляет файлы в конец архива;
 -t - выводит содержимое архива;
 -u - обновляет только те файлы, кот. новее одноименных файлов в архиве;
 -x - извлекает файлы из архива;
 -f - устанавливает имя для архива;
 -v - выводит подробную сводку операции;
 --delete - удаляет содержимое архива;
 --overwrite - перезаписывает файлы при извлечении;
 --overwrite-dir - перезаписывает каталоги при извлечении;
 --remove-files - удаляет файлы при добавлении в архив.

Примеры архивации и распаковки: 
 tar -cvf archive.tar hello.txt image.png book.pdf
 tar -cvf home.tar /home
 tar -xvf archive.tar (распаковка)

Создание архива объединенияет нескольких файлов в один пакет, но не сжимает их. 
Для сжатия, команде tar нужно передать опцию -z (gzip) или -j (bzip2).

 tar -czvf archive.tar.gz hello.txt image.png book.pdf

Архивные файлы сохраняют свои пути при распаковке. Например, если при архивации указать
путь /home/username/Documents/file.txt, то при распаковке, файл туда же и выгрузится.

Опция -С (большая), при архивации, позволяет включить в архив только относительные 
пути файлов и каталогов: tar -cvf archive.tar -C ~/Documents/test .

Точка указывает, что при распаковке все файлы архива поместятся в текущую папку. 
Вместо точки можно указать произвольный путь. Это будут подпапки в текущем каталоге.

При распаковке тоже можно указать опцию -C. В этом случае файлы будут распакованы в
указанный каталог, а не текущую папку: tar -xvf archive.tar -C test(copy).

Для архивации, сжатия и распаковки zip-файлов используются команды zip и unzip.
Опция -r рекурсивно архивирует содержимое папок.

 zip myfiles.zip book.pdf image.png
 unzip myfiles.zip

---------------------

ПОЛЬЗОВАТЕЛИ И ГРУППЫ

Учетная запись пользователя - это объект, который создается в системе Linux для
предоставления разрешений, позволяющих выполнять определенные задачи.

Учетные записи создаются как для людей, которым необходим доступ к системе, так и для
служб, которым нужен доступ к определенным файлам или ресурсам (демоны).

Пользователи Linux обладают рядом свойств. Эти св-ва хранятся в файлах /etc/passwd 
и /etc/shadow. В частности, это:

 * Username - имя/логин пользователя; по умолчанию в системе есть пользователи, кот.
   предназначены для системных задач и служб; их не следует изменять или удалять;

 * Password - пароль пользователя; хранится в /etc/shadow;

 * UID - идентификатор пользователя; числа до 1000 обычно принадлежат службам, 
   а после - людям; идентификатор 0 зарезервирован для пользователя root;

 * GID - идетификатор группы пользователя; в Linux все пользователи должны быть членами
   хотя бы одной группы (основной); помимо основной группы, пользователи могут быть
   членами и вторичных групп; параметры основной группы хранятся в /etc/passwd, 
   а вторичных - в /etc/group.

 * GECOS - комментарий, содержащий описание учетной записи (необязателен);

 * Домашний каталог - каталог пользователя, в котором храняется его файлы и конфиги
   (которые применяются конкретно к нему);

 * Оболочка по умолчанию - то, через что пользователь входит в систему 
   (нужна не всем пользователям).

Для выполнения действий в системе, связанных с администрированием, нужно чтобы их
команды запускались через sudo, например sudo apt update (перед выполнением система
потребует ввести пароль). 

Права пользователей и групп записаны в файле /etc/sudoers.
Подробное описание этого файла здесь https://metanit.com/os/linux/5.1.php

Управление пользователями...

reg add HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\SecureBoot\SBAT /v OptOut /d 1 /t REG_DWORD

